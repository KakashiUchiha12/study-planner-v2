"use client"

import { useState } from 'react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Textarea } from '@/components/ui/textarea'
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog'
import { BookOpen, X } from 'lucide-react'

interface Subject {
  id: string
  name: string
  description: string
  order: number
  materials: string[]
  color: string
  progress: number
  totalChapters: number
  completedChapters: number
  code: string
  credits: number
  instructor: string
  nextExam: Date | null
  createdAt: Date
  updatedAt: Date
}

interface AddSubjectDialogProps {
  open: boolean
  onOpenChange: (open: boolean) => void
  onAddSubject: (subject: Subject) => void
}

const colorOptions = [
  { name: "Primary", value: "bg-primary", hex: "#3B82F6" },
  { name: "Accent", value: "bg-accent", hex: "#8B5CF6" },
  { name: "Chart 1", value: "bg-chart-1", hex: "#10B981" },
  { name: "Chart 2", value: "bg-chart-2", hex: "#F59E0B" },
  { name: "Chart 3", value: "bg-chart-3", hex: "#EF4444" },
  { name: "Chart 4", value: "bg-chart-4", hex: "#14B8A6" },
  { name: "Chart 5", value: "bg-chart-5", hex: "#EC4899" },
]

export function AddSubjectDialog({ open, onOpenChange, onAddSubject }: AddSubjectDialogProps) {
  const [formData, setFormData] = useState({
    name: "",
    description: "",
    code: "",
    credits: "",
    instructor: "",
    nextExam: "",
  })
  const [materials, setMaterials] = useState<string[]>([])
  const [newMaterial, setNewMaterial] = useState("")

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()

    if (!formData.name.trim()) return

    const subject: Subject = {
      id: "", // Placeholder, will be generated by backend
      name: formData.name.trim(),
      description: formData.description.trim(),
      order: 0, // Placeholder, will be managed by backend
      createdAt: new Date(), // Placeholder, will be managed by backend
      updatedAt: new Date(), // Placeholder, will be managed by backend
      materials,
      color: "bg-primary", // Default color
      progress: 0,
      totalChapters: 0, // Start with 0 chapters
      completedChapters: 0,
      code: formData.code.trim(),
      credits: Number.parseInt(formData.credits) || 3,
      instructor: formData.instructor.trim(),
      nextExam: formData.nextExam ? new Date(formData.nextExam) : null,
    }

    onAddSubject(subject)

    // Reset form
    setFormData({
      name: "",
      description: "",
      code: "",
      credits: "",
      instructor: "",
      nextExam: "",
    })
    setMaterials([])
    setNewMaterial("")
  }

  const addMaterial = () => {
    if (newMaterial.trim() && !materials.includes(newMaterial.trim())) {
      setMaterials([...materials, newMaterial.trim()])
      setNewMaterial("")
    }
  }

  const removeMaterial = (index: number) => {
    setMaterials(materials.filter((_, i) => i !== index))
  }

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-[600px] max-h-[80vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>Add New Subject</DialogTitle>
          <DialogDescription>Create a new subject to track your academic progress</DialogDescription>
        </DialogHeader>

        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="name">Subject Name</Label>
            <Input
              id="name"
              placeholder="e.g., Mathematics, Physics, Chemistry"
              value={formData.name}
              onChange={(e) => setFormData({ ...formData, name: e.target.value })}
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="description">Description</Label>
            <Textarea
              id="description"
              placeholder="Brief description of the subject content"
              value={formData.description}
              onChange={(e) => setFormData({ ...formData, description: e.target.value })}
            />
          </div>



          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="code">Subject Code</Label>
              <Input
                id="code"
                placeholder="e.g., CS101, MATH201"
                value={formData.code || ""}
                onChange={(e) => setFormData({ ...formData, code: e.target.value })}
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="credits">Credit Hours</Label>
              <Input
                id="credits"
                type="number"
                min="1"
                max="6"
                placeholder="e.g., 3"
                value={formData.credits || ""}
                onChange={(e) => setFormData({ ...formData, credits: e.target.value })}
              />
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="instructor">Instructor</Label>
            <Input
              id="instructor"
              placeholder="e.g., Dr. Smith, Prof. Johnson"
              value={formData.instructor || ""}
              onChange={(e) => setFormData({ ...formData, instructor: e.target.value })}
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="nextExam">Next Exam Date (Optional)</Label>
            <Input
              id="nextExam"
              type="date"
              value={formData.nextExam}
              onChange={(e) => setFormData({ ...formData, nextExam: e.target.value })}
            />
          </div>

          <div className="space-y-2">
            <Label>Study Materials</Label>
            <div className="flex space-x-2">
              <Input
                placeholder="Add study material (books, websites, etc.)"
                value={newMaterial}
                onChange={(e) => setNewMaterial(e.target.value)}
                onKeyPress={(e) => e.key === "Enter" && (e.preventDefault(), addMaterial())}
              />
              <Button type="button" variant="outline" onClick={addMaterial}>
                <BookOpen className="h-4 w-4" />
              </Button>
            </div>
            {materials.length > 0 && (
              <div className="flex flex-wrap gap-2 mt-2">
                {materials.map((material, index) => (
                  <span key={index} className="flex items-center gap-1 bg-secondary text-secondary-foreground px-2 py-1 rounded-md text-sm">
                    {material}
                    <button type="button" onClick={() => removeMaterial(index)} className="ml-1 hover:text-destructive">
                      <X className="h-3 w-3" />
                    </button>
                  </span>
                ))}
              </div>
            )}
          </div>

          <DialogFooter>
            <Button type="button" variant="outline" onClick={() => onOpenChange(false)}>
              Cancel
            </Button>
            <Button type="submit">Add Subject</Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  )
}
