// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  name         String
  email        String   @unique
  passwordHash String   @map("password_hash")
  image        String?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  subjects      Subject[]
  tasks         Task[]
  studySessions StudySession[]
  studyGoals    StudyGoal[]

  @@map("users")
}

model Subject {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  name        String
  color       String   @default("#3B82F6")
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks        Task[]
  studySessions StudySession[]
  studyGoals   StudyGoal[]

  @@map("subjects")
}

model Task {
  id          String    @id @default(cuid())
  userId      String    @map("user_id")
  subjectId   String?   @map("subject_id")
  title       String
  description String?
  priority    Priority  @default(MEDIUM)
  status      TaskStatus @default(PENDING)
  dueDate     DateTime? @map("due_date")
  completedAt DateTime? @map("completed_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  subject Subject? @relation(fields: [subjectId], references: [id], onDelete: SetNull)

  @@map("tasks")
}

model StudySession {
  id             String   @id @default(cuid())
  userId         String   @map("user_id")
  subjectId      String?  @map("subject_id")
  durationMinutes Int     @map("duration_minutes")
  startTime      DateTime @map("start_time")
  endTime        DateTime @map("end_time")
  notes          String?
  createdAt      DateTime @default(now()) @map("created_at")

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  subject Subject? @relation(fields: [subjectId], references: [id], onDelete: SetNull)

  @@map("study_sessions")
}

model StudyGoal {
  id           String      @id @default(cuid())
  userId       String      @map("user_id")
  subjectId    String?     @map("subject_id")
  title        String
  targetHours  Int         @map("target_hours")
  currentHours Int         @default(0) @map("current_hours")
  deadline     DateTime?
  status       GoalStatus  @default(ACTIVE)
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  subject Subject? @relation(fields: [subjectId], references: [id], onDelete: SetNull)

  @@map("study_goals")
}

// Enums
enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum GoalStatus {
  ACTIVE
  COMPLETED
  ABANDONED
}
